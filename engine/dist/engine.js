var Raycaster =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/exports.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/worker-loader/dist/workers/InlineWorker.js":
/*!*****************************************************************!*\
  !*** ./node_modules/worker-loader/dist/workers/InlineWorker.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};\n\n//# sourceURL=webpack://Raycaster/./node_modules/worker-loader/dist/workers/InlineWorker.js?");

/***/ }),

/***/ "./src/camera.js":
/*!***********************!*\
  !*** ./src/camera.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Camera; });\n/* harmony import */ var _color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./color */ \"./src/color.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./src/util.js\");\n\n\n/**\n * Ray class used for performing logic\n *\n */\nclass Ray extends Phaser.Line {\n  constructor(x, y, angle, length) {\n    super();\n    this.fromAngle(x, y, angle, length);\n    this.origin = new Phaser.Point(this.start.x, this.start.y);\n    this.collisions = [];\n  }\n}\n\n/**\n * Native camera object used to cast rays.\n *\n * @param {PlanarObject} object - Object that the camera is attached to. May be reassigned at any point.\n * @param {number} [fov=100] - Fov in degrees of the camera\n * @param {number} [turnSpeed=3.14159] - Turn speed of the camera in radians per seconds.\n *\n */\nclass Camera {\n  constructor(object, game, fov, turnSpeed) {\n    this.object = object;\n    this.game = game;\n    this.fov = typeof fov !== \"undefined\" ? fov : 100;\n    this.turnSpeed = typeof turnSpeed !== \"undefined\" ? turnSpeed : Math.PI;\n\n    this._rays = [];\n\n    /* Offsets the axis positions of the camera from the owner object. */\n    // 2d context\n    this.xOffset = 0;\n    this.zOffset = 0;\n    // 3d context\n    // yOffset is at the top of the object\n    this.yOffset = this.object.varHeight;\n\n    // May set to render the ground and sky custom colors\n    this.groundColor = undefined;\n    this.skyColor = undefined;\n  }\n\n  calculateRayCollision() {\n    let obj = this.object;\n    this._rays.forEach((ray) => {\n      this.object.raycaster.objects.forEach((colObj) => {\n        if (colObj === obj || !colObj.visible) return;\n        const intersection = Object(_util__WEBPACK_IMPORTED_MODULE_1__[\"intersect\"])(ray.start.x, ray.start.y, ray.end.x, ray.end.y, colObj.start.x, colObj.start.y, colObj.end.x, colObj.end.y);\n        if (intersection) ray.collisions.push({ p: intersection, obj: colObj });\n      });\n    });\n  }\n\n  castRays() {\n    this._rays.length = 0; // empty the ray array\n\n    // distToProjSurface = total_rays/2 / tan(half_of_fov_in_rad)\n    const distToProjSurface = (this.object.raycaster.totalRays / 2) / Math.tan((this.fov / 2).toRad());\n    for (let x = 0; x < this.object.raycaster.totalRays; x++) {\n      let angle = Math.atan((x - (this.object.raycaster.totalRays / 2)) / distToProjSurface);\n      angle += (this.object.angle.toDeg()+90).toRad();\n      const ray = new Ray(this.object.midPoint().x + this.xOffset, this.object.midPoint().y + this.zOffset, angle, this.object.raycaster.renderDistance);\n      this._rays.push(ray);\n    }\n  }\n\n  render() {    \n    const ctx = this.game.canvas.getContext('2d');\n\n    this.renderGround(ctx, this.groundColor);\n    this.renderSky(ctx, this.skyColor);\n    this.renderView(ctx);\n  }\n\n  renderSky(ctx, color) {\n    // eslint-disable-next-line no-param-reassign\n    if (typeof color === 'undefined') color = new _color__WEBPACK_IMPORTED_MODULE_0__[\"default\"](99, 185, 255, 1);\n\n    ctx.beginPath();\n    ctx.fillStyle = color.toCSSString();\n    ctx.fillRect(0, 0, this.object.raycaster.instanceWidth, this.object.raycaster.instanceHeight / 2);\n  }\n\n  renderGround(ctx, color) {\n    // eslint-disable-next-line no-param-reassign\n    if (typeof color === 'undefined') color = new _color__WEBPACK_IMPORTED_MODULE_0__[\"default\"](226, 226, 226, 1);\n\n    ctx.beginPath();\n    ctx.fillStyle = color.toCSSString();\n    ctx.fillRect(0, this.object.raycaster.instanceHeight / 2, this.object.raycaster.instanceWidth, this.object.raycaster.instanceHeight / 2);\n  }\n\n  renderView(ctx) {\n    this.castRays();\n    this.calculateRayCollision();\n    const drawTimes = [];\n    const drawColumn = (column, color) => {\n      ctx.beginPath();\n      ctx.fillStyle = color.toCSSString();\n      ctx.fillRect(column.x, column.y, column.width, column.height);\n    };\n    this._rays.forEach((ray, i) => {\n      // eslint-disable-next-line max-len\n      const collisions = ray.collisions;\n      collisions.forEach((collision) => {\n        const distance = Math.sqrt(((collision.p.x - ray.origin.x) ** 2) + ((collision.p.y - ray.origin.y) ** 2));\n        collision.distance = distance;\n      });\n      collisions.sort((c1, c2) => c2.distance - c1.distance);\n      if (!this.object.raycaster.variableHeight) {\n        for (let m = 0; m < collisions.length; m++) {\n          const col = collisions[m];\n          col.renderThisFrame = true;\n          if (m > 0) {\n            const prevCol = collisions[m - 1];\n            if (col.obj.color.a === 1) {\n              prevCol.renderThisFrame = false;\n            }\n          }\n        }\n      }\n      for (let n = 0; n < collisions.length; n++) {\n        const col = collisions[n];\n        if (!this.object.raycaster.variableHeight && col.renderThisFrame === false) {\n          continue;\n        }\n        const collision = col.p;\n        const collisionObject = col.obj;\n\n        const texture = col.obj.texture;\n\n\n        const rayLen = this._rays.length;\n        const width = Math.ceil(this.object.raycaster.instanceWidth / rayLen);\n        // console.log(width);\n        const dx = collision.x - ray.origin.x;\n        const dy = collision.y - ray.origin.y;\n        // const distance = Math.sqrt((dx * dx) + (dy * dy));\n        const distance = col.distance;\n        const projHeight = distance * Math.cos((Math.atan2(dy, dx) - (this.object.angle.toDeg()-90).toRad()));\n        const actualHeight = this.object.raycaster.variableHeight ? collisionObject.varHeight : 1;\n\n\n        const color = collisionObject.color;\n\n        const x = Math.floor((i) * (this.object.raycaster.instanceWidth / rayLen));\n\n        const projectedHeight = (this.object.raycaster.instanceHeight / (projHeight / this.fov));\n        // console.log(this.object.raycaster.instanceHeight);\n        // const projectedHeight = this.object.raycaster.instanceHeight/(projHeight/this.fov);\n        const height = 2 * actualHeight * (projectedHeight / 2);\n        // Change (this.object.raycaster.instanceHeight * 2) to (this.object.raycaster.instanceHeight * verticalAngleInDegrees/360) to look up and down. Maxes at height * 360 and height * 0;\n        //    NOTE: Skybox/ground won't work with this method and I don't know a fix. Probably some fairly basic math.\n      // Change this.object.varHeight to higher or lower to move on the z-axis.\n        // Once at a value > 1, variable height must be enabled for it to render properly.\n        const y = (this.object.raycaster.instanceHeight * (this.object.verticalAngle/(Math.PI*2))) - ((projectedHeight) * (this.object.yPos3D + this.yOffset));\n        const column = new Phaser.Rectangle(\n          x, // x\n          y, // y\n          width, // width\n          height, // height\n        );\n\n        if (texture !== null) {\n          const textureData = texture;\n\n          const image = textureData.getCurrentFrame();\n          if (image === undefined) {\n            drawColumn(column, color);\n          } else {\n            const distanceFromStart = Math.sqrt(((collision.x - collisionObject.start.x) ** 2) + ((collision.y - collisionObject.start.y) ** 2));\n            const pixelColumn = Object(_util__WEBPACK_IMPORTED_MODULE_1__[\"scale\"])(distanceFromStart, 0, collisionObject.length, 0, image.width);\n            // console.log(image.width,image.height);\n            const imageHeight = image.height;\n\n            const t1 = Date.now();\n\n            ctx.drawImage(\n              image, // image\n              pixelColumn, // imageX\n              0, // imageY\n              1, // imageWidth\n              imageHeight, // imageHeight\n              column.x, // canvasX\n              column.y, // canvasY\n              column.width, // imageScaleWidth\n              column.height, // imageScaleHeight\n            );\n            drawTimes.push(Date.now() - t1);\n          }\n        } else {\n          drawColumn(column, color);\n        }\n      }\n    });\n  }\n}\n\n\n//# sourceURL=webpack://Raycaster/./src/camera.js?");

/***/ }),

/***/ "./src/color.js":
/*!**********************!*\
  !*** ./src/color.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Color; });\n/**\n * Native color class used in engine, in the format rgba.\n * Note: Alpha is supported, but, when used in large quantities, may result in significant loss of performance.\n */\nclass Color {\n  constructor(r, g, b, a=1) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  /**\n   * Utility function used to convert values r, g, b to a CSS hex string\n   *    NOTE: Ignores the alpha layer.\n   *\n   */\n  toHexString() {\n    return \"#\" + (\n      (1 << 24) // eslint-disable-line no-bitwise\n      + (this.r << 16) // eslint-disable-line no-bitwise\n      + (this.g << 8) // eslint-disable-line no-bitwise\n      + this.b\n    ).toString(16).slice(1);\n  }\n\n  toHexInt() {\n    return parseInt(this.toHexString(this.r, this.g, this.b, this.a).slice(1), 16);\n  }\n\n  toCSSString() {\n    return `rgba(${this.r},${this.g},${this.b},${this.a})`;\n  }\n}\n\n\n//# sourceURL=webpack://Raycaster/./src/color.js?");

/***/ }),

/***/ "./src/engine.js":
/*!***********************!*\
  !*** ./src/engine.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Raycaster; });\n/* harmony import */ var _texture__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./texture */ \"./src/texture.js\");\n/* harmony import */ var _objects__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./objects */ \"./src/objects.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ \"./src/errors.js\");\n/* harmony import */ var _keyboard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./keyboard */ \"./src/keyboard.js\");\n/* harmony import */ var _color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./color */ \"./src/color.js\");\n\n\n\n\n\n\nclass Raycaster {\n  /*\n  Main class used to perform update logic and handle the game state\n\n  @param {number} width - Width in pixels of game instances\n  @param {number} height - Height in pixels of game instances\n  @param {string | HTMlElement} parent - Parent element that game instances will be created within\n  @param {Phaser.State | null} state - State used to manage game instances.\n  @param {number} [renderDistance=100000] - Max length in pixels of rays that Entities cast out\n    Has infinitesimal effect on performance\n  @param {number} [totalRays=null] - Total amount of rays that are cast out by an Entity\n    Recommended to be left as null as it uses it will use the width of the game instances\n    Can be reduced or increased to increase or reduce fps respectively\n  @param {boolean} [debug=false] - Sets if the debugger is shown.\n  @param {Object} [options={}] - Additional optional parameters to speed up initialization of object\n  @param {number} [options.worldWidth=null] - If not null, the world will have defined width. Required along with options.worldHeight in order to use any map related utilities.\n  @param {number} [options.worldHeight=null] - If not null, the world will have defined height. Required along with options.worldWidth in order to use any map related utilities.\n  @param {Boolean} [options.variableHeight=false] - Sets if PlanarObjects not of type Entity may have variable height\n    Must be set in order for variable height to render properly or else taller objects will not be rendered when behind shorter ones\n    // NOTE: Variable height results in some loss of performance\n  @param {Phaser.State | null} [options.assetLoadState=null] - Loads all assets synchronously before proceeding to the preload state. If null, loads assets asynchronously.\n  @param {Boolean} [options.automaticallyResize] - Maintains the sizes of game instances in proportion to the window's size.\n  */\n  constructor(canvasWidth, canvasHeight, parent, state=null, renderDistance = 1e7, totalRays = null, debug = false, options = {}) {\n    this.options = {\n      worldWidth: null,\n      worldHeight: null,\n      variableHeight: false,\n      assetLoadState: null,\n      automaticallyResize: false\n    };\n    Object.keys(options).forEach((key) => {\n      if (Object.prototype.hasOwnProperty.call(this.options, key)) {\n        this.options[key] = options[key];\n      }\n    });\n    Object.keys(this.options).forEach((key) => {\n      this[key] = this.options[key];\n    });\n    delete this.options;\n\n    this.renderDistance = renderDistance;\n    this.debugMode = debug;\n\n    this.totalRays = typeof totalRays === 'undefined' || totalRays === null || totalRays === undefined ? canvasWidth : totalRays;\n\n\n    this.create = new Raycaster.ObjectFactory(this);\n\n    this.renderFPS = debug;\n    this.debugObjects = [];\n    this.instanceWidth = canvasWidth;\n    this.instanceHeight = canvasHeight;\n    this.instanceParent = parent;\n    this.gameInstances = [];\n    this.objects = [];\n    this.running = false;\n\n    this.prevTime = performance.now();\n\n    this._textures = [];\n\n    this.keyboard = new _keyboard__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n\n    this.mainGame = state;\n\n    if (this.automaticallyResize) {\n      this.aspectRatio = {\n        x: this.instanceWidth / document.body.clientWidth,\n        y: this.instanceHeight / document.body.clientHeight\n      }\n    }\n\n    window.addEventListener('resize', (e) => {\n      if (this.automaticallyResize) {\n        this.gameInstances.forEach(game => {\n          game.scale.setGameSize(this.aspectRatio.x * document.body.clientWidth, this.aspectRatio.y * document.body.clientHeight);\n        });\n      }\n    });\n  }\n\n  init() {\n    // this.debugInstance = new Phaser.Game(this.instanceWidth, this.instanceHeight, this.instanceParent, Phaser.CANVAS);\n    // if (!this.debugMode) {\n      // this.debugInstance.canvas.style.display = 'none';\n    // } else {\n      // this.debugInstance.time.advancedTiming = true;\n    // }\n    this.running = true;\n\n\n    if (this.worldWidth !== null && this.worldHeight !== null) {\n      this.addGameObjects(\n        this.create.wallBlock(0,0,this.worldWidth,this.worldHeight, _objects__WEBPACK_IMPORTED_MODULE_1__[\"Wall\"],{color:new _color__WEBPACK_IMPORTED_MODULE_4__[\"default\"](255,255,255,1)})\n      );\n    }\n\n    if (this.mainGame !== null) {\n      // Main state is passed the raycaster instance if needed\n      let mainState = new this.mainGame(this);\n      mainState.preload()\n      this.gameInstances.forEach((game) => {\n        let parentElement = this.instanceParent === '' ? null : document.getElementById(this.instanceParent);\n          if (parentElement === null) parentElement = document.body;\n          parentElement.appendChild(game.canvas);\n          game.state = new game.State(game);\n          game.state.preload();\n      });\n      mainState.create();\n      this.gameInstances.forEach((game) => {\n          game.state.create();\n      });\n      const update = () => {\n          const delta = this._update();\n          mainState.update(delta);\n          this.gameInstances.forEach((game) => {\n              game.time.totalElapsed += delta;\n              game.time.delta = delta;\n              game.state.update(delta);\n          });\n          mainState.render();\n          this.gameInstances.forEach((game) => {\n              game.state.render(delta);\n              game.time.totalFrames++;\n              this.renderDebugMode();\n          });\n          window.requestAnimationFrame(update);\n      }\n      window.requestAnimationFrame(update);\n    }\n    else {\n      // Only one game instance (hopefully)\n      this.gameInstances.forEach((game) => {\n        let parentElement = this.instanceParent === '' ? null : document.getElementById(this.instanceParent);\n        // If parent is empty or element doesn't exist append to body\n        if (parentElement === null) parentElement = document.body;\n        parentElement.appendChild(game.canvas);\n\n        let state = new game.State(game);\n        state.preload();\n        state.create();\n\n        const update = () => {\n          const delta = this._update();\n          game.time.totalElapsed += delta;\n          game.time.delta = delta;\n          state.update(delta);\n          state.render(delta);\n          this.renderDebugMode();\n          game.time.totalFrames++;\n          window.requestAnimationFrame(update);\n        }\n        window.requestAnimationFrame(update);\n      });\n    }\n  }\n\n  getTextureData(key) {\n    const data = this._textures[key];\n    if (data === undefined) {\n      throw new _errors__WEBPACK_IMPORTED_MODULE_2__[\"CacheError\"](`Texture \"${key}\" does not exist in the cache.`);\n      return false;\n    }\n    else {\n      return data;\n    }\n  }\n\n  async loadTexture(key, path, options = {}) {\n    /*\n    Loads a texture into the cache.\n\n    @param {String} key - Key stored in cache to fetch TextureData\n    @param {String} path - File path or URI that is loaded as a texture\n    @param {Object} options - Array of additional arguments\n    @param {Boolean} options.alpha - (ONLY SUPPORTS .GIFS WITH FRAMES OF DISPOSAL TYPE 1) If false, the alpha layer of the .gif will be removed\n\n    @returns {Promise.<String>} key - Key used to instantiate the texture from the cache.\n    */\n\n    const texture = new _texture__WEBPACK_IMPORTED_MODULE_0__[\"TextureData\"](key);\n\n    this._textures.hasOwnProperty(key) && console.warn(new _errors__WEBPACK_IMPORTED_MODULE_2__[\"CacheError\"](`Texture ${key} was overwritten`));\n\n    this._textures[key] = texture;\n\n    await texture.load(path, options);\n\n    return texture;\n\n    // return key;\n  }\n\n  /**\n   * Create a raycaster game instance (rendering and logical space).\n   *\n   * @param {Object} state - A state constructor returning or containing methods `preload`, `create`, `update`, and `render.`\n   */\n  createGame(state) {\n    let canvas = document.createElement('canvas');\n    canvas.width = this.instanceWidth;\n    canvas.height = this.instanceHeight;\n    let game = this._createGameObject(state, canvas);\n    this.gameInstances.push(game);\n    return game;\n  }\n\n  _createGameObject(state, canvas) {\n    return {\n      canvas: canvas,\n      time: {\n        totalFrames: 0,\n        totalElapsed: 0,\n        delta: 0,\n        get fps() {\n          // Should probably improve the formula\n          return 1000 / this.delta;\n        }\n      },\n      State: state\n    };\n  }\n\n  /**\n   * Adds a game object (inherits PlanarObject) to the raycaster instance\n   */\n  addGameObject(obj) {\n    this.objects.push(obj);\n  }\n\n  /**\n   * Recursively adds all game objects inside of `objs` to the raycaster instance\n   */\n  addGameObjects(objs) {\n    objs.forEach((obj) => {\n      if (Array.isArray(obj)) {\n        this.addGameObjects(obj);\n      } else {\n        this.addGameObject(obj);\n      }\n    });\n  }\n\n  removeGameObject(obj) {\n    this.objects = this.objects.filter(o => o !== obj);\n  }\n\n  _update() {\n    const newTime = performance.now();\n    const delta = newTime - this.prevTime;\n    this.prevTime = newTime;\n\n    // Runs time logic still to prevent something like tabbing out from resulting in huge time delta when tabbing back in.\n\n    if (!this.running) return;\n\n    this.objects.forEach((obj) => {\n      obj.preUpdate();\n      obj.update(delta);\n    });\n\n    return delta;\n\n  }\n\n\n\n  renderDebugMode() {\n    if (this.renderFPS) {\n      this.gameInstances.forEach((instance) => {\n        let ctx = instance.canvas.getContext('2d');\n          ctx.font = \"20px Arial\";\n          ctx.fillStyle = \"#000000\";\n\n          ctx.fillText(\"FPS: \"+instance.time.fps.toFixed(0), 20, 35);\n\n          ctx.font = \"14px Arial\";\n          ctx.fillStyle = \"#000000\";\n          this.debugObjects.forEach((obj, i) => {\n            const objRepr = `${obj.constructor.name}(x: ${Math.round(obj.x)}, z: ${Math.round(obj.y)}, y: ${Math.round(obj.yPos3D)})`;\n            ctx.fillText(objRepr, 20, 70+(i*30));\n          });\n      });\n    }\n    // this.objects.forEach((obj) => {\n    // });\n\n  }\n}\n\nRaycaster.ObjectFactory = function ObjectFactory(raycaster) {\n  return {\n    planarObject(...args) {\n      return new _objects__WEBPACK_IMPORTED_MODULE_1__[\"PlanarObject\"](raycaster, ...args);\n    },\n\n    wall(...args) {\n      return new _objects__WEBPACK_IMPORTED_MODULE_1__[\"Wall\"](raycaster, ...args);\n    },\n\n    wallBlock(...args) {\n      return Object(_objects__WEBPACK_IMPORTED_MODULE_1__[\"wallBlock\"])(raycaster, ...args);\n    },\n\n    entity(...args) {\n      return new _objects__WEBPACK_IMPORTED_MODULE_1__[\"Wall\"](raycaster, ...args);\n    },\n\n    texture(...args) {\n      return new _texture__WEBPACK_IMPORTED_MODULE_0__[\"Texture\"](...args);\n    },\n\n  };\n};\n\n// eslint-disable-next-line no-extend-native\nNumber.prototype.toRad = function toRad() {\n  return this * (Math.PI / 180);\n};\n\n// eslint-disable-next-line no-extend-native\nNumber.prototype.toDeg = function toDeg() {\n  return this * (180 / Math.PI);\n};\n\n// eslint-disable-next-line no-extend-native\nNumber.prototype.clamp = function clamp(min, max) {\n  return Math.min(Math.max(this, min), max);\n};\n\n\n//# sourceURL=webpack://Raycaster/./src/engine.js?");

/***/ }),

/***/ "./src/errors.js":
/*!***********************!*\
  !*** ./src/errors.js ***!
  \***********************/
/*! exports provided: BoundsError, LoadError, CacheError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BoundsError\", function() { return BoundsError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LoadError\", function() { return LoadError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CacheError\", function() { return CacheError; });\nclass BoundsError extends Error {\n  constructor(...args) {\n    super(...args);\n    this.name = this.constructor.name;\n  }\n}\nclass LoadError extends Error {\n  constructor(...args) {\n    super(...args);\n    this.name = this.constructor.name;\n  }\n}\nclass CacheError extends Error {\n  constructor(...args) {\n    super(...args);\n    this.name = this.constructor.name;\n  }\n}\n\n\n//# sourceURL=webpack://Raycaster/./src/errors.js?");

/***/ }),

/***/ "./src/exports.js":
/*!************************!*\
  !*** ./src/exports.js ***!
  \************************/
/*! exports provided: Engine, Texture, MapBuilder, Minimap, Wall, Camera, constructWallBlock, PlanarObject, Color, Key, Error */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine */ \"./src/engine.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Engine\", function() { return _engine__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./color */ \"./src/color.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Color\", function() { return _color__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ \"./src/util.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"MapBuilder\", function() { return _util__WEBPACK_IMPORTED_MODULE_2__[\"MapBuilder\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Minimap\", function() { return _util__WEBPACK_IMPORTED_MODULE_2__[\"Minimap\"]; });\n\n/* harmony import */ var _texture__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./texture */ \"./src/texture.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Texture\", function() { return _texture__WEBPACK_IMPORTED_MODULE_3__[\"Texture\"]; });\n\n/* harmony import */ var _camera__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./camera */ \"./src/camera.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Camera\", function() { return _camera__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; });\n\n/* harmony import */ var _keyboard__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./keyboard */ \"./src/keyboard.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Key\", function() { return _keyboard__WEBPACK_IMPORTED_MODULE_5__[\"Key\"]; });\n\n/* harmony import */ var _objects__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./objects */ \"./src/objects.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Wall\", function() { return _objects__WEBPACK_IMPORTED_MODULE_6__[\"Wall\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"constructWallBlock\", function() { return _objects__WEBPACK_IMPORTED_MODULE_6__[\"wallBlock\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PlanarObject\", function() { return _objects__WEBPACK_IMPORTED_MODULE_6__[\"PlanarObject\"]; });\n\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./errors */ \"./src/errors.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Error\", function() { return _errors__WEBPACK_IMPORTED_MODULE_7__; });\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://Raycaster/./src/exports.js?");

/***/ }),

/***/ "./src/keyboard.js":
/*!*************************!*\
  !*** ./src/keyboard.js ***!
  \*************************/
/*! exports provided: default, Key */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Keyboard; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Key\", function() { return Key; });\nclass Keyboard {\n  constructor() {\n    this.enabled = true;\n    this._keysDown = {};\n    window.onkeydown = (e) => {\n      // Store relevant properties from the event\n      this._keysDown[e.keyCode] = {\n        location: e.location,\n      };\n    }\n    window.onkeyup = (e) => {\n      this._keysDown[e.keyCode] = false;\n    }\n  }\n  isDown(keyCode) {\n    return !this.enabled ? false : this._keysDown[keyCode];\n  }\n  /**\n   * Add a key object\n   *\n   * @param {int} keyCode - The key code for the key. For ease of use, the Key class contains mappings for all these keys.\n   */\n  addKey(keyCode) {\n    return new Key(this, keyCode);\n  }\n  addKeys(keyCodes) {\n    keyCodes.forEach((keyCode) => this.addKey(keyCode));\n  }\n}\n\nclass Key {\n  constructor(keyboard, keyCode) {\n    this.keyboard = keyboard;\n    this.keyCode = keyCode;\n  }\n  get isDown() {\n    return this.keyboard.isDown(this.keyCode);\n  }\n}\n\nKey.ZERO = 48;\nKey.ONE = 49;\nKey.TWO = 50;\nKey.THREE = 51;\nKey.FOUR = 52;\nKey.FIVE = 53;\nKey.SIX = 54;\nKey.SEVEN = 55;\nKey.EIGHT = 56;\nKey.NINE = 57;\nKey.A = 65;\nKey.ADD = 107;\nKey.ALT = 18;\nKey.B = 66;\nKey.BACKSPACE = 8;\nKey.BACK_SLASH = 220;\nKey.C = 67;\nKey.CAPS_LOCK = 20;\nKey.CLOSE_BRAKET = 221;\nKey.COMMA = 188;\nKey.CTRL = 17;\nKey.D = 68;\nKey.DASH = 189;\nKey.DECIMAL_POINT = 110;\nKey.DELETE = 46;\nKey.DIVIDE = 111;\nKey.DOWN_ARROW = 40;\nKey.E = 69;\nKey.END = 35;\nKey.ENTER = 13;\nKey.EQUAL_SIGN = 187;\nKey.ESCAPE = 27;\nKey.F = 70;\nKey.F1 = 112;\nKey.F2 = 113;\nKey.F3 = 114;\nKey.F4 = 115;\nKey.F5 = 116;\nKey.F6 = 117;\nKey.F7 = 118;\nKey.F8 = 119;\nKey.F9 = 120;\nKey.F10 = 121;\nKey.F11 = 122;\nKey.F12 = 123;\nKey.FORWARD_SLASH = 191;\nKey.G = 71;\nKey.GRAVE_ACCENT = 192;\nKey.H = 72;\nKey.HOME = 36;\nKey.I = 73;\nKey.INSERT = 45;\nKey.J = 74;\nKey.K = 75;\nKey.L = 76;\nKey.LEFT_ARROW = 37;\nKey.LEFT_WINDOW_KEY = 91;\nKey.M = 77;\nKey.MULTIPLY = 106;\nKey.N = 78;\nKey.NUMPAD_0 = 96;\nKey.NUMPAD_1 = 97;\nKey.NUMPAD_2 = 98;\nKey.NUMPAD_3 = 99;\nKey.NUMPAD_4 = 100;\nKey.NUMPAD_5 = 101;\nKey.NUMPAD_6 = 102;\nKey.NUMPAD_7 = 103;\nKey.NUMPAD_8 = 104;\nKey.NUMPAD_9 = 105;\nKey.NUM_LOCK = 144;\nKey.O = 79;\nKey.OPEN_BRACKET = 219;\nKey.P = 80;\nKey.PAGE_DOWN = 34;\nKey.PAGE_UP = 33;\nKey.PAUSE_BREAK = 19;\nKey.PERIOD = 190;\nKey.Q = 81;\nKey.R = 82;\nKey.RIGHT_ARROW = 39;\nKey.RIGHT_WINDOW_KEY = 92;\nKey.S = 83;\nKey.SCROLL_LOCK = 145;\nKey.SELECT_KEY = 93;\nKey.SEMI_COLON = 186;\nKey.SHIFT = 16;\nKey.SINGLE_QUOTE = 222;\nKey.SPACE = 32;\nKey.SUBTRACT = 109;\nKey.T = 84;\nKey.TAB = 9;\nKey.U = 85;\nKey.UP_ARROW = 38;\nKey.V = 86;\nKey.W = 87;\nKey.X = 88;\nKey.Y = 89;\nKey.Z = 90;\n\n\n//# sourceURL=webpack://Raycaster/./src/keyboard.js?");

/***/ }),

/***/ "./src/objects.js":
/*!************************!*\
  !*** ./src/objects.js ***!
  \************************/
/*! exports provided: PlanarObject, Wall, wallBlock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PlanarObject\", function() { return PlanarObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Wall\", function() { return Wall; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"wallBlock\", function() { return wallBlock; });\n/* harmony import */ var _camera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./camera */ \"./src/camera.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"./src/errors.js\");\n/* harmony import */ var _color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./color */ \"./src/color.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ \"./src/util.js\");\n\n\n\n\n\nclass PlanarObject extends Phaser.Line {\n  /*\n  Native renderable object (the equivalent of a line in the Euclidean plane)\n\n  @param {number} x - Initial starting x-axis coordinate\n  @param {number} y - Initial starting y-axis coordinate\n  @param {number} x2 - Initial ending x-axis coordinate\n  @param {number} y2 - Initial ending y-axis coordinate\n  @param {Object} [options={}] - Additional PlanarObject options\n  @param {Boolean} [options.collision=true] - Boolean regarding whether objects of type Entity will have movement blocked by the PlanarObject\n  @param {number} [options.height=1] - Initial height of object (relative to the projected height of the object)\n  @param {String} [options.texture=null] - Image key referencing the cached texture (must be preloaded into the cache)\n  @param {Color} [options.color=new Color(255,255,255,1)] - Color object of the object (given a texture is not present)\n    // NOTE: It is not recommended to use colors of very high intensity, such as rgb(255,255,0), nor those of very low intensity, such as rgb(5,5,0)\n    // NOTE: but rather shades such as rgb(230,230,0).\n    // NOTE: This is because with colors of very high or low intensity, opacity will often not be perceivable as it either brightens or darkens the color.\n\n  @param {Boolean} [options.render=true] - Boolean regarding whether or not the object will be rendered\n  */\n  constructor(raycaster, x, y, x2, y2, options = {}) {\n    super(x, y, x2, y2);\n    this.raycaster = raycaster;\n\n\n\n    this.camera = null;\n\n    this.options = {\n      collision: true,\n      varHeight: 1,\n      texture: null,\n      color: new _color__WEBPACK_IMPORTED_MODULE_2__[\"default\"](255, 255, 255, 1),\n      visible: true,\n    };\n\n    Object.keys(options).forEach((key) => {\n      if (Object.prototype.hasOwnProperty.call(this.options, key)) {\n        this.options[key] = options[key];\n      }\n    });\n    Object.keys(this.options).forEach((key) => {\n      this[key] = this.options[key];\n    });\n    delete this.options;\n\n    // if (typeof this.options.color === \"string\") this.options.color = new Color(this.options.color); //TODO\n    if (this.texture instanceof String || typeof this.texture === 'string') {\n      try {\n        this.texture = raycaster.create.texture(raycaster.getTextureData(this.texture));\n      }\n      catch (e) {\n        // Error is thrown if the texture does not exist in the cache. However, this should not halt the program.\n        console.warn(e);\n        this.texture = null;\n      }\n    }\n\n    // Experimental\n    this.verticalAngle = Math.PI;\n\n    /* Mass is used in the calculation of acceleration. It is not particularly relevant, but may be changed if desired. */\n    this.mass = 1;\n\n    /* Velocity is the rate of change of an object's position. */\n    this.velocity = {\n      x: 0,\n      z: 0,\n      y: 0\n    };\n    /* Terminal velocity is the maximum velocity an object can have. In the real world, it is caused due to resistance applied by a medium such as air. */\n    this.terminalVelocity = {\n      x: null,\n      z: null,\n      y: null\n    };\n    /* Friction is the will slow an object's velocity. It is a constant force applied to the object every physics loop. */\n    this.friction = {\n      x: 0,\n      z: 0,\n      y: 0\n    };\n\n    // Y-Axis position in the 3d plane.\n    this.yPos3D = 0;\n\n    const error = new _errors__WEBPACK_IMPORTED_MODULE_1__[\"BoundsError\"](`PlanarObject ${this.toString()} instantiated outside of world bounds`);\n    if (\n      (raycaster.worldWidth !== null && Math.min(this.start.x, this.end.x) < 0)\n      || (raycaster.worldWidth !== null && Math.max(this.start.x, this.end.x) > raycaster.worldWidth)\n      || (raycaster.worldHeight !== null && Math.min(this.start.y, this.end.y) < 0)\n      || (raycaster.worldHeight !== null && Math.max(this.start.y, this.end.y) > raycaster.worldHeight)\n    ) {\n      throw error;\n    }\n  }\n\n  /**\n   * Instantiate a camera on this object\n   *\n   */\n  addCamera(game, fov, turnSpeed) {\n    this.camera = new _camera__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this, game, fov, turnSpeed);\n  }\n\n  /**\n   * Sets up the mouse. Must be called before mouse will work.\n   */\n  setupMouse(game) {\n    game.canvas.addEventListener('mousedown', () => { Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"requestPointerLock\"])(game); }, this);\n    game.input.addMoveCallback((pointer, x, y, click) => { this.mouseMove(game, pointer, x, y, click); }, this);\n  }\n\n  /**\n   * When called the mouse will begin to fire callbacks on mouse move\n   *\n   */\n  enableMouse(game) {\n    game.input.mouse.start();\n  }\n\n  /**\n   * When called the mouse will cease to fire callbacks on mouse move\n   *\n   */\n  disableMouse(game) {\n    game.input.mouse.stop();\n  }\n\n  // eslint-disable-next-line\n  mouseMove(pointer, x, y, click) {\n    // Should be overloaded to add functionality to mouse\n    // Should only be used in non split screen games\n  }\n\n  /**\n   * Turn the PlanarObject horizontally.\n   *\n   * @param {number} angle  - Sets the angle relative to the current angle in radians.\n   */\n  turnHorizontally(angle) {\n    this.rotate(angle);\n  }\n\n  /**\n   * Turn the PlanarObject vertically.\n   *\n   * @param {number} angle  - Sets the angle relative to the current angle in radians.\n   */\n  turnVertically(angle) {\n    this.verticalAngle += angle;\n  }\n\n  /**\n   * Sets the angle (absolute).\n   *\n   * @param {number} angle - The angle in radians.\n   */\n   setAngle(angle) {\n     this.rotate(angle-this.angle);\n   }\n\n  /**\n   * Method for moving the PlanarObject within a 2d context (x-axis and z-axis).\n   *\n   * @param {number} force - Amount of force applied to the PlanarObject.\n   * @param {number} horiz - Number of value either 1 or -1 to indicate strafing.\n   * @param {number} elapsed - Elapsed time since last frame in milliseconds.\n   */\n  move(force, horiz, elapsed) {\n    let ang = this.angle;\n    ang = Math.PI*2 - ang;\n    if (horiz === 1) {\n      ang += Math.PI/2;\n    }\n    else if (horiz === -1) {\n      ang -= Math.PI * (3/2);\n    }\n\n    let acceleration = force / this.mass;\n\n    // Angular velocity\n    this.velocity.x += acceleration * Math.sin(ang) * (elapsed/1000);\n    this.velocity.z += acceleration * Math.cos(ang) * (elapsed/1000);\n\n    // let x = speed * (Math.sin(ang));\n    // let y = speed * (Math.cos(ang));\n    // this.setTo(this.start.x+x,this.start.y+y,this.end.x+x,this.end.y+y);\n  }\n\n  /**\n   * Method for moving the PlanarObject along the y-axis within the 3d plane.\n   *    NOTE: The y-axis is relative to the unit height of all PlanarObjects.\n   *    NOTE: The camera is positioned at PlanarObject.yPos3D, which on default is the top of the PlanarObject.\n   *\n   * @param {number} force - Amount of force applied to the PlanarObject.\n   * @param {number} elapsed - Elapsed time since last frame in milliseconds.\n   */\n  moveY(force, elapsed) {\n    let acceleration = force / this.mass;\n    this.velocity.y += acceleration * (elapsed/1000);\n  }\n\n  handleCollision() {\n    // ifndef\n    if (!this.prevPos) {\n      this.prevPos = {\n        x: this.midPoint().x,\n        y: this.midPoint().y\n      };\n    }\n    let mid = this.midPoint();\n    const slope = [mid.y - this.prevPos.y, mid.x - this.prevPos.x];\n    let moveAngle = Math.atan2(slope[0],slope[1]).toDeg();\n    if (moveAngle < 0) moveAngle = 360 + moveAngle;\n    // console.log(moveAngle);\n    // console.log(this.sprite.body.velocity.x);\n\n    if (slope[0] !== 0 || slope[1] !== 0) {\n      for (let i=0;i<this.raycaster.objects.length;i++) {\n        let obj = this.raycaster.objects[i];\n        if (obj === this || !obj.collision) continue;\n        let intersection = Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"intersect\"])(this.prevPos.x,this.prevPos.y,this.prevPos.x,mid.y,obj.start.x,obj.start.y,obj.end.x,obj.end.y);\n        let intersected = false;\n        if (intersection) {\n          intersected = true;\n          this.setTo(this.start.x,this.start.y - (mid.y-this.prevPos.y),this.end.x,this.end.y - (mid.y-this.prevPos.y));\n          // this.sprite.y = this.prevPos.y;\n\n        }\n        intersection = Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"intersect\"])(this.prevPos.x,this.prevPos.y,mid.x,this.prevPos.y,obj.start.x,obj.start.y,obj.end.x,obj.end.y);\n        if (intersection) {\n          intersected = true;\n          this.setTo(this.start.x - (mid.x-this.prevPos.x),this.start.y,this.end.x - (mid.x-this.prevPos.x),this.end.y);\n          // this.sprite.x = this.prevPos.x;\n        }\n        // if (intersected) break;\n      }\n    }\n\n    this.prevPos = {\n      x: this.midPoint().x,\n      y: this.midPoint().y\n    };\n  }\n  /*\n  handleCollision() {\n    // ifndef\n    if (!this.prevPos) {\n      this.prevPos = {\n        start:{x:this.start.x,y:this.start.y},\n        end:{x:this.end.x,y:this.end.y}\n      };\n    }\n    Object.keys(this.prevPos).forEach((type) => {\n      let prevPos = this.prevPos[type];\n      // Generally bad. But fixed so it won't have any unexpected behavior.\n      let mid = this[type];\n      const slope = [mid.y - prevPos.y, mid.x - prevPos.x];\n      let moveAngle = Math.atan2(slope[0],slope[1]).toDeg();\n      if (moveAngle < 0) moveAngle = 360 + moveAngle;\n      // console.log(moveAngle);\n      // console.log(this.sprite.body.velocity.x);\n      if (slope[0] !== 0 || slope[1] !== 0) {\n        for (let i=0;i<this.raycaster.objects.length;i++) {\n          let obj = this.raycaster.objects[i];\n          if (obj === this || !obj.options.collision) continue;\n          let intersection = intersect(prevPos.x,prevPos.y,prevPos.x,mid.y,obj.start.x,obj.start.y,obj.end.x,obj.end.y);\n          let intersected = false;\n          if (intersection) {\n            intersected = true;\n            this.setTo(this.start.x,this.start.y - (mid.y-prevPos.y),this.end.x,this.end.y - (mid.y-prevPos.y));\n            // this.sprite.y = prevPos.y;\n          }\n          intersection = intersect(prevPos.x,prevPos.y,mid.x,prevPos.y,obj.start.x,obj.start.y,obj.end.x,obj.end.y);\n          if (intersection) {\n            intersected = true;\n            this.setTo(this.start.x - (mid.x-prevPos.x),this.start.y,this.end.x - (mid.x-prevPos.x),this.end.y);\n            // this.sprite.x = prevPos.x;\n          }\n          // if (intersected) break;\n        }\n      }\n    });\n    this.prevPos = {\n      start:{x:this.start.x,y:this.start.y},\n      end:{x:this.end.x,y:this.end.y}\n    };\n  }\n  */\n\n  /**\n   * Shorthand for setting the x-axis coordinate\n   *\n   */\n  setX(x) {\n    this.setTo(x,this.start.y,x+(this.end.x-this.start.x),this.end.y);\n  }\n\n  /**\n   * Shorthand for setting the z-axis coordinate\n   *\n   */\n  setZ(z) {\n    this.setTo(this.start.x,z,this.end.x,z+(this.end.y-this.start.y));\n  }\n\n\n  // These methods may be overloaded as long as super method is called\n\n  /**\n   * Called on PlanarObject every update loop, but before the Raycaster imposes any update logic.\n   *\n   * @param {number} elapsed - Time delta in milliseconds spanning the beginning of the last frame's update loop to the beginning of the current frame's update loop\n   */\n  preUpdate(elapsed) {\n    //Called on PlanarObject every update loop, but before the Raycaster imposes any update logic\n  }\n\n  /**\n   * Called on PlanarObject every update loop, but after the Raycaster imposes any update logic.\n   *\n   * @param {number} elapsed - Time delta in milliseconds spanning the beginning of the last frame's update loop to the beginning of the current frame's update loop\n   */\n  update(elapsed) {\n    if (this.texture !== null) this.texture.update();\n\n    /* Update position */\n\n    // Apply friction\n    let acc = {\n      x: this.friction.x / this.mass,\n      z: this.friction.z / this.mass,\n      y: this.friction.y / this.mass\n    };\n    for (let axis in this.velocity) {\n      let sign = Math.sign(this.velocity[axis]);\n      // Polish\n      if (axis !== \"y\") {\n        this.velocity[axis] -= sign * acc[axis] * (elapsed/1000);\n        if (Math.sign(this.velocity[axis]) !== sign) {\n          // If went past 0, set to 0.\n          this.velocity[axis] = 0;\n        }\n      }\n      else {\n        this.velocity[axis] -= acc[axis] * (elapsed/1000);\n      }\n\n      // Clamp the velocity to ensure that it does not exceed terminal velocity\n      if (this.terminalVelocity[axis] !== null) {\n        this.velocity[axis] = this.velocity[axis].clamp(-this.terminalVelocity[axis], this.terminalVelocity[axis]);\n      }\n    }\n\n    if (this.velocity.x !== 0 || this.velocity.z !== 0) {\n      let x = this.velocity.x * (elapsed/1000);\n      let z = this.velocity.z * (elapsed/1000);\n      this.setX(this.start.x+x);\n      this.setZ(this.start.y+z);\n      // this.setTo(this.start.x+x,this.start.y+z,this.end.x+x,this.end.y+z);\n\n      this.handleCollision();\n    }\n\n    if (this.velocity.y !== 0) {\n      let y = this.velocity.y * (elapsed/1000);\n      this.yPos3D += y;\n    }\n\n    // const gravitationalForce = 200;\n    // let yForce = gravitationalForce + this.yForce;\n    // if (this.yForce !== undefined) {\n    //   this.yForce *= .9;\n    //   this.z -= (yForce) * (elapsed/1000) * (elapsed/1000);\n    //   this.z = Math.max(1/2, this.z);\n    // }\n  }\n\n  /**\n   * Called on PLanarObject every every render loop, but after all update logic. Only called half as frequently as update methods.\n   *\n   * @param {number} elapsed - Time delta in milliseconds spanning the beginning of the last frame's update loop to the beginning of the current frame's update loop.\n   *    NOTE: Elapsed remains a constant throughout the frame. It will not differ between each frame-related function.\n   */\n  render(elapsed) {\n  }\n\n  toString() {\n    return `[${this.constructor.name}(${this.start.x},${this.start.y},${this.end.x},${this.end.y})]`;\n  }\n}\n\nclass Wall extends PlanarObject {\n  constructor(raycaster, x, y, x2, y2, options = {}) {\n    super(raycaster, x, y, x2, y2, options);\n  }\n}\n\n/**\n * Helper function that constructs a square of walls\n *\n * @returns Wall[] - Constructed walls in the order \"top, right, bottom, left\"\n */\nfunction wallBlock(raycaster, x, y, x2, y2, WallType, options = {}) {\n  return [\n    // eslint-disable-next-line new-cap\n    new WallType(raycaster, x, y, x2, y, options),\n    new WallType(raycaster, x, y, x, y2, options),\n    new WallType(raycaster, x, y2, x2, y2, options),\n    new WallType(raycaster, x2, y, x2, y2, options),\n  ];\n}\n\n\n//# sourceURL=webpack://Raycaster/./src/objects.js?");

/***/ }),

/***/ "./src/texture.js":
/*!************************!*\
  !*** ./src/texture.js ***!
  \************************/
/*! exports provided: TextureData, Texture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextureData\", function() { return TextureData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Texture\", function() { return Texture; });\n/* harmony import */ var _texture_worker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./texture.worker.js */ \"./src/texture.worker.js\");\n/* harmony import */ var _texture_worker_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_texture_worker_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"./src/errors.js\");\n\n\n\nclass TextureData {\n  constructor(key) {\n    this.key = key;\n    this.frames = [];\n    this.loaded = false;\n  }\n\n  async load(url, options = {}) {\n    if (!new RegExp('^(?:[a-z]+:)?//', 'i').test(url)) {\n      url = window.location + url;\n    }\n    if (/.*\\.gif/.test(url)) {\n      /**\n       * GIF file\n       *\n       * @param {Object} options - Object of options.\n       * @param {Boolean} alpha - If false, the alpha layer will be stripped from the frames in the GIF. Recommended if variable height is disabled.\n       *    NOTE: This is applied on loading, and therefore it applies to all instances of the texture. Additionally, it means that it is static and may not be changed post-load.\n       *\n       */\n      const worker = new _texture_worker_js__WEBPACK_IMPORTED_MODULE_0___default.a();\n      worker.addEventListener('message', (e) => {\n        let msg = e.data;\n        // For some reason `ImageBitmap` objects lose all additional properties when sent over `postMessage`\n        msg.loadedFrames = msg.loadedFrames.map((f) => {\n          f.bmp.frameLength = f.frameLength;\n          return f.bmp;\n        })\n        if (msg.type === 'loadGIF') {\n          this.loaded = true;\n          this.frames = this.frames.concat(msg.loadedFrames);\n          return;\n        }\n      });\n      worker.postMessage({\n        type: 'loadGIF',\n        url: url,\n        options: options\n      })\n    } else if (/.*(\\.mp4|\\.m4a|\\.m4p|\\.m4b|\\.m4r|\\.m4v)/.test(url)) {\n      /**\n       * MP4 file\n       *\n       * @param {Object} options - Object of options.\n       * @param {Object} videoProps - Object of properties that will be applied to the video element on instantiation.\n       *\n       */\n      const video = document.createElement('video');\n      video.src = url;\n      video.muted = true; // Chrome 66+ requires that the video must be muted to autoplay without user interaction.\n      Object.entries(options.videoProps).forEach(([key, value]) => {\n        video[key] = value;\n      });\n      video.onloadedmetadata = () => {\n        console.log(1);\n        video.width = video.videoWidth;\n        video.height = video.videoHeight;\n        this.frames.push(video);\n        this.loaded = true;\n        video.play();\n        return;\n      };\n    } else {\n      /**\n       * Image file (duck test)\n\n       */\n      const image = new Image();\n      image.src = url;\n      image.onload = () => {\n        this.loaded = true;\n        return;\n      };\n      image.onerror = () => {\n        this.loaded = true;\n        throw new Error(`Failed to load texture \"${this.key}\" at url \"${url}\"`);\n      };\n      this.frames.push(image);\n    }\n  }\n}\n\nclass Texture {\n  constructor(textureData) {\n    this.textureData = textureData;\n    this.key = textureData.key;\n    this.loaded = textureData.loaded;\n    this.frames = textureData.frames;\n    this._currentFrame = 0;\n    this.elapsed = 0;\n    this.prevTime = null;\n  }\n\n  update() {\n    if (this.loaded !== this.textureData.loaded) {\n      this.loaded = this.textureData.loaded;\n      this.frames = this.textureData.frames.slice();\n    }\n\n    const currentFrame = this.getCurrentFrame();\n\n    if (currentFrame !== undefined) {\n      const currentTime = Date.now();\n      if (this.prevTime === null) {\n        this.prevTime = currentTime;\n      } else {\n        const elapsed = currentTime - this.prevTime;\n        this.elapsed += elapsed;\n        if (this.elapsed >= currentFrame.frameLength) {\n          this.elapsed = 0;\n          this.playNextFrame();\n        }\n        this.prevTime = currentTime;\n      }\n    }\n  }\n\n  playNextFrame() {\n    this._currentFrame++;\n    if (this._currentFrame >= this.frames.length) {\n      this._currentFrame = 0;\n    }\n  }\n\n  getCurrentFrame() {\n    return this.frames[this._currentFrame];\n  }\n}\n\n\n//# sourceURL=webpack://Raycaster/./src/texture.js?");

/***/ }),

/***/ "./src/texture.worker.js":
/*!*******************************!*\
  !*** ./src/texture.worker.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = function() {\n  return __webpack_require__(/*! !./node_modules/worker-loader/dist/workers/InlineWorker.js */ \"./node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"/******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n/******/\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n/******/\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId]) {\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n/******/ \\t\\t}\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\ti: moduleId,\\n/******/ \\t\\t\\tl: false,\\n/******/ \\t\\t\\texports: {}\\n/******/ \\t\\t};\\n/******/\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n/******/\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.l = true;\\n/******/\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n/******/\\n/******/\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n/******/\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n/******/\\n/******/ \\t// define getter function for harmony exports\\n/******/ \\t__webpack_require__.d = function(exports, name, getter) {\\n/******/ \\t\\tif(!__webpack_require__.o(exports, name)) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n/******/ \\t\\t}\\n/******/ \\t};\\n/******/\\n/******/ \\t// define __esModule on exports\\n/******/ \\t__webpack_require__.r = function(exports) {\\n/******/ \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n/******/ \\t\\t}\\n/******/ \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n/******/ \\t};\\n/******/\\n/******/ \\t// create a fake namespace object\\n/******/ \\t// mode & 1: value is a module id, require it\\n/******/ \\t// mode & 2: merge all properties of value into the ns\\n/******/ \\t// mode & 4: return value when already ns object\\n/******/ \\t// mode & 8|1: behave like require\\n/******/ \\t__webpack_require__.t = function(value, mode) {\\n/******/ \\t\\tif(mode & 1) value = __webpack_require__(value);\\n/******/ \\t\\tif(mode & 8) return value;\\n/******/ \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n/******/ \\t\\tvar ns = Object.create(null);\\n/******/ \\t\\t__webpack_require__.r(ns);\\n/******/ \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n/******/ \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n/******/ \\t\\treturn ns;\\n/******/ \\t};\\n/******/\\n/******/ \\t// getDefaultExport function for compatibility with non-harmony modules\\n/******/ \\t__webpack_require__.n = function(module) {\\n/******/ \\t\\tvar getter = module && module.__esModule ?\\n/******/ \\t\\t\\tfunction getDefault() { return module['default']; } :\\n/******/ \\t\\t\\tfunction getModuleExports() { return module; };\\n/******/ \\t\\t__webpack_require__.d(getter, 'a', getter);\\n/******/ \\t\\treturn getter;\\n/******/ \\t};\\n/******/\\n/******/ \\t// Object.prototype.hasOwnProperty.call\\n/******/ \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n/******/\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"\\\";\\n/******/\\n/******/\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(__webpack_require__.s = \\\"./src/texture.worker.js\\\");\\n/******/ })\\n/************************************************************************/\\n/******/ ({\\n\\n/***/ \\\"./src/external/gifuct-js.min.js\\\":\\n/*!***************************************!*\\\\\\n  !*** ./src/external/gifuct-js.min.js ***!\\n  \\\\***************************************/\\n/*! exports provided: window */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"window\\\\\\\", function() { return window; });\\\\nvar require;var require;const window = {};\\\\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\\\\\\\"function\\\\\\\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\\\\\\\"Cannot find module '\\\\\\\"+o+\\\\\\\"'\\\\\\\");throw f.code=\\\\\\\"MODULE_NOT_FOUND\\\\\\\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\\\\\\\"function\\\\\\\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\\\\n\\\\n// Stream object for reading off bytes from a byte array\\\\n\\\\nfunction ByteStream(data){\\\\n\\\\tthis.data = data;\\\\n\\\\tthis.pos = 0;\\\\n}\\\\n\\\\n// read the next byte off the stream\\\\nByteStream.prototype.readByte = function(){\\\\n\\\\treturn this.data[this.pos++];\\\\n};\\\\n\\\\n// look at the next byte in the stream without updating the stream position\\\\nByteStream.prototype.peekByte = function(){\\\\n\\\\treturn this.data[this.pos];\\\\n};\\\\n\\\\n// read an array of bytes\\\\nByteStream.prototype.readBytes = function(n){\\\\n\\\\tvar bytes = new Array(n);\\\\n\\\\tfor(var i=0; i<n; i++){\\\\n\\\\t\\\\tbytes[i] = this.readByte();\\\\n\\\\t}\\\\n\\\\treturn bytes;\\\\n};\\\\n\\\\n// peek at an array of bytes without updating the stream position\\\\nByteStream.prototype.peekBytes = function(n){\\\\n\\\\tvar bytes = new Array(n);\\\\n\\\\tfor(var i=0; i<n; i++){\\\\n\\\\t\\\\tbytes[i] = this.data[this.pos + i];\\\\n\\\\t}\\\\n\\\\treturn bytes;\\\\n};\\\\n\\\\n// read a string from a byte set\\\\nByteStream.prototype.readString = function(len){\\\\n\\\\tvar str = '';\\\\n\\\\tfor(var i=0; i<len; i++){\\\\n\\\\t\\\\tstr += String.fromCharCode(this.readByte());\\\\n\\\\t}\\\\n\\\\treturn str;\\\\n};\\\\n\\\\n// read a single byte and return an array of bit booleans\\\\nByteStream.prototype.readBitArray = function(){\\\\n\\\\tvar arr = [];\\\\n\\\\tvar bite = this.readByte();\\\\n\\\\tfor (var i = 7; i >= 0; i--) {\\\\n\\\\t\\\\tarr.push(!!(bite & (1 << i)));\\\\n\\\\t}\\\\n\\\\treturn arr;\\\\n};\\\\n\\\\n// read an unsigned int with endian option\\\\nByteStream.prototype.readUnsigned = function(littleEndian){\\\\n\\\\tvar a = this.readBytes(2);\\\\n\\\\tif(littleEndian){\\\\n\\\\t\\\\treturn (a[1] << 8) + a[0];\\\\n\\\\t}else{\\\\n\\\\t\\\\treturn (a[0] << 8) + a[1];\\\\n\\\\t}\\\\n};\\\\n\\\\nmodule.exports = ByteStream;\\\\n},{}],2:[function(require,module,exports){\\\\n\\\\n// Primary data parsing object used to parse byte arrays\\\\n\\\\nvar ByteStream = require('./bytestream');\\\\n\\\\nfunction DataParser(data){\\\\n\\\\tthis.stream = new ByteStream(data);\\\\n\\\\t// the final parsed object from the data\\\\n\\\\tthis.output = {};\\\\n}\\\\n\\\\nDataParser.prototype.parse = function(schema){\\\\n\\\\t// the top level schema is just the top level parts array\\\\n\\\\tthis.parseParts(this.output, schema);\\\\n\\\\treturn this.output;\\\\n};\\\\n\\\\n// parse a set of hierarchy parts providing the parent object, and the subschema\\\\nDataParser.prototype.parseParts = function(obj, schema){\\\\n\\\\tfor(var i=0; i<schema.length; i++){\\\\n\\\\t\\\\tvar part = schema[i];\\\\n\\\\t\\\\tthis.parsePart(obj, part);\\\\n\\\\t}\\\\n};\\\\n\\\\nDataParser.prototype.parsePart = function(obj, part){\\\\n\\\\tvar name = part.label;\\\\n\\\\tvar value;\\\\n\\\\n\\\\t// make sure the part meets any parse requirements\\\\n\\\\tif(part.requires && ! part.requires(this.stream, this.output, obj)){\\\\n\\\\t\\\\treturn;\\\\n\\\\t}\\\\n\\\\n\\\\tif(part.loop){\\\\n\\\\t\\\\t// create a parse loop over the parts\\\\n\\\\t\\\\tvar items = [];\\\\n\\\\t\\\\twhile(part.loop(this.stream)){\\\\n\\\\t\\\\t\\\\tvar item = {};\\\\n\\\\t\\\\t\\\\tthis.parseParts(item, part.parts);\\\\n\\\\t\\\\t\\\\titems.push(item);\\\\n\\\\t\\\\t}\\\\n\\\\t\\\\tobj[name] = items;\\\\n\\\\t}else if(part.parts){\\\\n\\\\t\\\\t// process any child parts\\\\n\\\\t\\\\tvalue = {};\\\\n\\\\t\\\\tthis.parseParts(value, part.parts);\\\\n\\\\t\\\\tobj[name] = value;\\\\n\\\\t}else if(part.parser){\\\\n\\\\t\\\\t// parse the value using a parser\\\\n\\\\t\\\\tvalue = part.parser(this.stream, this.output, obj);\\\\n\\\\t\\\\tif(!part.skip){\\\\n\\\\t\\\\t\\\\tobj[name] = value;\\\\n\\\\t\\\\t}\\\\n\\\\t}else if(part.bits){\\\\n\\\\t\\\\t// convert the next byte to a set of bit fields\\\\n\\\\t\\\\tobj[name] = this.parseBits(part.bits);\\\\n\\\\t}\\\\n};\\\\n\\\\n// combine bits to calculate value\\\\nfunction bitsToNum(bitArray){\\\\n\\\\treturn bitArray.reduce(function(s, n) { return s * 2 + n; }, 0);\\\\n}\\\\n\\\\n// parse a byte as a bit set (flags and values)\\\\nDataParser.prototype.parseBits = function(details){\\\\n\\\\tvar out = {};\\\\n\\\\tvar bits = this.stream.readBitArray();\\\\n\\\\tfor(var key in details){\\\\n\\\\t\\\\tvar item = details[key];\\\\n\\\\t\\\\tif(item.length){\\\\n\\\\t\\\\t\\\\t// convert the bit set to value\\\\n\\\\t\\\\t\\\\tout[key] = bitsToNum(bits.slice(item.index, item.index + item.length));\\\\n\\\\t\\\\t}else{\\\\n\\\\t\\\\t\\\\tout[key] = bits[item.index];\\\\n\\\\t\\\\t}\\\\n\\\\t}\\\\n\\\\treturn out;\\\\n};\\\\n\\\\nmodule.exports = DataParser;\\\\n},{\\\\\\\"./bytestream\\\\\\\":1}],3:[function(require,module,exports){\\\\n\\\\n// a set of common parsers used with DataParser\\\\n\\\\nvar Parsers = {\\\\n\\\\t// read a byte\\\\n\\\\treadByte: function(){\\\\n\\\\t\\\\treturn function(stream){\\\\n\\\\t\\\\t\\\\treturn stream.readByte();\\\\n\\\\t\\\\t};\\\\n\\\\t},\\\\n\\\\t// read an array of bytes\\\\n\\\\treadBytes: function(length){\\\\n\\\\t\\\\treturn function(stream){\\\\n\\\\t\\\\t\\\\treturn stream.readBytes(length);\\\\n\\\\t\\\\t};\\\\n\\\\t},\\\\n\\\\t// read a string from bytes\\\\n\\\\treadString: function(length){\\\\n\\\\t\\\\treturn function(stream){\\\\n\\\\t\\\\t\\\\treturn stream.readString(length);\\\\n\\\\t\\\\t};\\\\n\\\\t},\\\\n\\\\t// read an unsigned int (with endian)\\\\n\\\\treadUnsigned: function(littleEndian){\\\\n\\\\t\\\\treturn function(stream){\\\\n\\\\t\\\\t\\\\treturn stream.readUnsigned(littleEndian);\\\\n\\\\t\\\\t};\\\\n\\\\t},\\\\n\\\\t// read an array of byte sets\\\\n\\\\treadArray: function(size, countFunc){\\\\n\\\\t\\\\treturn function(stream, obj, parent){\\\\n\\\\t\\\\t\\\\tvar count = countFunc(stream, obj, parent);\\\\n\\\\t\\\\t\\\\tvar arr = new Array(count);\\\\n\\\\t\\\\t\\\\tfor(var i=0; i<count; i++){\\\\n\\\\t\\\\t\\\\t\\\\tarr[i] = stream.readBytes(size);\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t\\\\treturn arr;\\\\n\\\\t\\\\t};\\\\n\\\\t}\\\\n};\\\\n\\\\nmodule.exports = Parsers;\\\\n},{}],4:[function(require,module,exports){\\\\n// export wrapper for exposing library\\\\n\\\\nvar GIF = window.GIF || {};\\\\n\\\\nGIF = require('./gif');\\\\n\\\\nwindow.GIF = GIF;\\\\n},{\\\\\\\"./gif\\\\\\\":5}],5:[function(require,module,exports){\\\\n\\\\n// object used to represent array buffer data for a gif file\\\\n\\\\nvar DataParser = require('../bower_components/js-binary-schema-parser/src/dataparser');\\\\nvar gifSchema = require('./schema');\\\\n\\\\nfunction GIF(arrayBuffer){\\\\n\\\\t// convert to byte array\\\\n\\\\tvar byteData = new Uint8Array(arrayBuffer);\\\\n\\\\tvar parser = new DataParser(byteData);\\\\n\\\\t// parse the data\\\\n\\\\tthis.raw = parser.parse(gifSchema);\\\\n\\\\n\\\\t// set a flag to make sure the gif contains at least one image\\\\n\\\\tthis.raw.hasImages = false;\\\\n\\\\tfor(var f=0; f<this.raw.frames.length; f++){\\\\n\\\\t\\\\tif(this.raw.frames[f].image){\\\\n\\\\t\\\\t\\\\tthis.raw.hasImages = true;\\\\n\\\\t\\\\t\\\\tbreak;\\\\n\\\\t\\\\t}\\\\n\\\\t}\\\\n}\\\\n\\\\n// process a single gif image frames data, decompressing it using LZW\\\\n// if buildPatch is true, the returned image will be a clamped 8 bit image patch\\\\n// for use directly with a canvas.\\\\nGIF.prototype.decompressFrame = function(index, buildPatch){\\\\n\\\\n\\\\t// make sure a valid frame is requested\\\\n\\\\tif(index >= this.raw.frames.length){ return null; }\\\\n\\\\n\\\\tvar frame = this.raw.frames[index];\\\\n\\\\tif(frame.image){\\\\n\\\\t\\\\t// get the number of pixels\\\\n\\\\t\\\\tvar totalPixels = frame.image.descriptor.width * frame.image.descriptor.height;\\\\n\\\\n\\\\t\\\\t// do lzw decompression\\\\n\\\\t\\\\tvar pixels = lzw(frame.image.data.minCodeSize, frame.image.data.blocks, totalPixels);\\\\n\\\\n\\\\t\\\\t// deal with interlacing if necessary\\\\n\\\\t\\\\tif(frame.image.descriptor.lct.interlaced){\\\\n\\\\t\\\\t\\\\tpixels = deinterlace(pixels, frame.image.descriptor.width);\\\\n\\\\t\\\\t}\\\\n\\\\n\\\\t\\\\t// setup usable image object\\\\n\\\\t\\\\tvar image = {\\\\n\\\\t\\\\t\\\\tpixels: pixels,\\\\n\\\\t\\\\t\\\\tdims: {\\\\n\\\\t\\\\t\\\\t\\\\ttop: frame.image.descriptor.top,\\\\n\\\\t\\\\t\\\\t\\\\tleft: frame.image.descriptor.left,\\\\n\\\\t\\\\t\\\\t\\\\twidth: frame.image.descriptor.width,\\\\n\\\\t\\\\t\\\\t\\\\theight: frame.image.descriptor.height\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t};\\\\n\\\\n\\\\t\\\\t// color table\\\\n\\\\t\\\\tif(frame.image.descriptor.lct && frame.image.descriptor.lct.exists){\\\\n\\\\t\\\\t\\\\timage.colorTable = frame.image.lct;\\\\n\\\\t\\\\t}else{\\\\n\\\\t\\\\t\\\\timage.colorTable = this.raw.gct;\\\\n\\\\t\\\\t}\\\\n\\\\n\\\\t\\\\t// add per frame relevant gce information\\\\n\\\\t\\\\tif(frame.gce){\\\\n\\\\t\\\\t\\\\timage.delay = (frame.gce.delay || 10) * 10; // convert to ms\\\\n\\\\t\\\\t\\\\timage.disposalType = frame.gce.extras.disposal;\\\\n\\\\t\\\\t\\\\t// transparency\\\\n\\\\t\\\\t\\\\tif(frame.gce.extras.transparentColorGiven){\\\\n\\\\t\\\\t\\\\t\\\\timage.transparentIndex = frame.gce.transparentColorIndex;\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t}\\\\n\\\\n\\\\t\\\\t// create canvas usable imagedata if desired\\\\n\\\\t\\\\tif(buildPatch){\\\\n\\\\t\\\\t\\\\timage.patch = generatePatch(image);\\\\n\\\\t\\\\t}\\\\n\\\\n\\\\t\\\\treturn image;\\\\n\\\\t}\\\\n\\\\n\\\\t// frame does not contains image\\\\n\\\\treturn null;\\\\n\\\\n\\\\n\\\\t/**\\\\n\\\\t * javascript port of java LZW decompression\\\\n\\\\t * Original java author url: https://gist.github.com/devunwired/4479231\\\\n\\\\t */\\\\n\\\\tfunction lzw(minCodeSize, data, pixelCount) {\\\\n\\\\n \\\\t\\\\tvar MAX_STACK_SIZE = 4096;\\\\n\\\\t\\\\tvar nullCode = -1;\\\\n\\\\n\\\\t\\\\tvar npix = pixelCount;\\\\n\\\\t\\\\tvar available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, i, datum, data_size, first, top, bi, pi;\\\\n\\\\n \\\\t\\\\tvar dstPixels = new Array(pixelCount);\\\\n\\\\t\\\\tvar prefix = new Array(MAX_STACK_SIZE);\\\\n\\\\t\\\\tvar suffix = new Array(MAX_STACK_SIZE);\\\\n\\\\t\\\\tvar pixelStack = new Array(MAX_STACK_SIZE + 1);\\\\n\\\\n\\\\t\\\\t// Initialize GIF data stream decoder.\\\\n\\\\t\\\\tdata_size = minCodeSize;\\\\n\\\\t\\\\tclear = 1 << data_size;\\\\n\\\\t\\\\tend_of_information = clear + 1;\\\\n\\\\t\\\\tavailable = clear + 2;\\\\n\\\\t\\\\told_code = nullCode;\\\\n\\\\t\\\\tcode_size = data_size + 1;\\\\n\\\\t\\\\tcode_mask = (1 << code_size) - 1;\\\\n\\\\t\\\\tfor (code = 0; code < clear; code++) {\\\\n\\\\t\\\\t\\\\tprefix[code] = 0;\\\\n\\\\t\\\\t\\\\tsuffix[code] = code;\\\\n\\\\t\\\\t}\\\\n\\\\n\\\\t\\\\t// Decode GIF pixel stream.\\\\n    let count;\\\\n\\\\t\\\\tdatum = bits = count = first = top = pi = bi = 0;\\\\n\\\\t\\\\tfor (i = 0; i < npix; ) {\\\\n\\\\t\\\\t\\\\tif (top === 0) {\\\\n\\\\t\\\\t\\\\t\\\\tif (bits < code_size) {\\\\n\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t// get the next byte\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tdatum += data[bi] << bits;\\\\n\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tbits += 8;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tbi++;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tcontinue;\\\\n\\\\t\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t\\\\t\\\\t// Get the next code.\\\\n\\\\t\\\\t\\\\t\\\\tcode = datum & code_mask;\\\\n\\\\t\\\\t\\\\t\\\\tdatum >>= code_size;\\\\n\\\\t\\\\t\\\\t\\\\tbits -= code_size;\\\\n\\\\t\\\\t\\\\t\\\\t// Interpret the code\\\\n\\\\t\\\\t\\\\t\\\\tif ((code > available) || (code == end_of_information)) {\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tbreak;\\\\n\\\\t\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t\\\\t\\\\tif (code == clear) {\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t// Reset decoder.\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tcode_size = data_size + 1;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tcode_mask = (1 << code_size) - 1;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tavailable = clear + 2;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\told_code = nullCode;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tcontinue;\\\\n\\\\t\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t\\\\t\\\\tif (old_code == nullCode) {\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tpixelStack[top++] = suffix[code];\\\\n\\\\t\\\\t\\\\t\\\\t\\\\told_code = code;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tfirst = code;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tcontinue;\\\\n\\\\t\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t\\\\t\\\\tin_code = code;\\\\n\\\\t\\\\t\\\\t\\\\tif (code == available) {\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tpixelStack[top++] = first;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tcode = old_code;\\\\n\\\\t\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t\\\\t\\\\twhile (code > clear) {\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tpixelStack[top++] = suffix[code];\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tcode = prefix[code];\\\\n\\\\t\\\\t\\\\t\\\\t}\\\\n\\\\n\\\\t\\\\t\\\\t\\\\tfirst = suffix[code] & 0xff;\\\\n\\\\t\\\\t\\\\t\\\\tpixelStack[top++] = first;\\\\n\\\\n\\\\t\\\\t\\\\t\\\\t// add a new string to the table, but only if space is available\\\\n\\\\t\\\\t\\\\t\\\\t// if not, just continue with current table until a clear code is found\\\\n\\\\t\\\\t\\\\t\\\\t// (deferred clear code implementation as per GIF spec)\\\\n\\\\t\\\\t\\\\t\\\\tif(available < MAX_STACK_SIZE){\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tprefix[available] = old_code;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tsuffix[available] = first;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tavailable++;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tif (((available & code_mask) === 0) && (available < MAX_STACK_SIZE)) {\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tcode_size++;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tcode_mask += available;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t\\\\t\\\\told_code = in_code;\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t\\\\t// Pop a pixel off the pixel stack.\\\\n\\\\t\\\\t\\\\ttop--;\\\\n\\\\t\\\\t\\\\tdstPixels[pi++] = pixelStack[top];\\\\n\\\\t\\\\t\\\\ti++;\\\\n\\\\t\\\\t}\\\\n\\\\n\\\\t\\\\tfor (i = pi; i < npix; i++) {\\\\n\\\\t\\\\t\\\\tdstPixels[i] = 0; // clear missing pixels\\\\n\\\\t\\\\t}\\\\n\\\\n\\\\t\\\\treturn dstPixels;\\\\n\\\\t}\\\\n\\\\n\\\\t// deinterlace function from https://github.com/shachaf/jsgif\\\\n\\\\tfunction deinterlace(pixels, width) {\\\\n\\\\n\\\\t\\\\tvar newPixels = new Array(pixels.length);\\\\n\\\\t\\\\tvar rows = pixels.length / width;\\\\n\\\\t\\\\tvar cpRow = function(toRow, fromRow) {\\\\n\\\\t\\\\t\\\\tvar fromPixels = pixels.slice(fromRow * width, (fromRow + 1) * width);\\\\n\\\\t\\\\t\\\\tnewPixels.splice.apply(newPixels, [toRow * width, width].concat(fromPixels));\\\\n\\\\t\\\\t};\\\\n\\\\n\\\\t\\\\t// See appendix E.\\\\n\\\\t\\\\tvar offsets = [0,4,2,1];\\\\n\\\\t\\\\tvar steps   = [8,8,4,2];\\\\n\\\\n\\\\t\\\\tvar fromRow = 0;\\\\n\\\\t\\\\tfor (var pass = 0; pass < 4; pass++) {\\\\n\\\\t\\\\t\\\\tfor (var toRow = offsets[pass]; toRow < rows; toRow += steps[pass]) {\\\\n\\\\t\\\\t\\\\t\\\\tcpRow(toRow, fromRow);\\\\n\\\\t\\\\t\\\\t\\\\tfromRow++;\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t}\\\\n\\\\n\\\\t\\\\treturn newPixels;\\\\n\\\\t}\\\\n\\\\n\\\\t// create a clamped byte array patch for the frame image to be used directly with a canvas\\\\n\\\\t// TODO: could potentially squeeze some performance by doing a direct 32bit write per iteration\\\\n\\\\tfunction generatePatch(image){\\\\n\\\\n\\\\t\\\\tvar totalPixels = image.pixels.length;\\\\n\\\\t\\\\tvar patchData = new Uint8ClampedArray(totalPixels * 4);\\\\n\\\\t\\\\tfor(var i=0; i<totalPixels; i++){\\\\n\\\\t\\\\t\\\\tvar pos = i * 4;\\\\n\\\\t\\\\t\\\\tvar colorIndex = image.pixels[i];\\\\n\\\\t\\\\t\\\\tvar color = image.colorTable[colorIndex];\\\\n\\\\t\\\\t\\\\tpatchData[pos] = color[0];\\\\n\\\\t\\\\t\\\\tpatchData[pos + 1] = color[1];\\\\n\\\\t\\\\t\\\\tpatchData[pos + 2] = color[2];\\\\n\\\\t\\\\t\\\\tpatchData[pos + 3] = colorIndex !== image.transparentIndex ? 255 : 0;\\\\n\\\\t\\\\t}\\\\n\\\\n\\\\t\\\\treturn patchData;\\\\n\\\\t}\\\\n};\\\\n\\\\n// returns all frames decompressed\\\\nGIF.prototype.decompressFrames = function(buildPatch){\\\\n\\\\tvar frames = [];\\\\n\\\\tfor(var i=0; i<this.raw.frames.length; i++){\\\\n\\\\t\\\\tvar frame = this.raw.frames[i];\\\\n\\\\t\\\\tif(frame.image){\\\\n\\\\t\\\\t\\\\tframes.push(this.decompressFrame(i, buildPatch));\\\\n\\\\t\\\\t}\\\\n\\\\t}\\\\n\\\\treturn frames;\\\\n};\\\\n\\\\nmodule.exports = GIF;\\\\n},{\\\\\\\"../bower_components/js-binary-schema-parser/src/dataparser\\\\\\\":2,\\\\\\\"./schema\\\\\\\":6}],6:[function(require,module,exports){\\\\n\\\\n// Schema for the js file parser to use to parse gif files\\\\n// For js object convenience (re-use), the schema objects are approximately reverse ordered\\\\n\\\\n// common parsers available\\\\nvar Parsers = require('../bower_components/js-binary-schema-parser/src/parsers');\\\\n\\\\n// a set of 0x00 terminated subblocks\\\\nvar subBlocks = {\\\\n\\\\tlabel: 'blocks',\\\\n\\\\tparser: function(stream){\\\\n\\\\t\\\\tvar out = [];\\\\n\\\\t\\\\tvar terminator = 0x00;\\\\n\\\\t\\\\tfor(var size=stream.readByte(); size!==terminator; size=stream.readByte()){\\\\n\\\\t\\\\t\\\\tout = out.concat(stream.readBytes(size));\\\\n\\\\t\\\\t}\\\\n\\\\t\\\\treturn out;\\\\n\\\\t}\\\\n};\\\\n\\\\n// global control extension\\\\nvar gce = {\\\\n\\\\tlabel: 'gce',\\\\n\\\\trequires: function(stream){\\\\n\\\\t\\\\t// just peek at the top two bytes, and if true do this\\\\n\\\\t\\\\tvar codes = stream.peekBytes(2);\\\\n\\\\t\\\\treturn codes[0] === 0x21 && codes[1] === 0xF9;\\\\n\\\\t},\\\\n\\\\tparts: [\\\\n\\\\t\\\\t{ label: 'codes', parser: Parsers.readBytes(2), skip: true },\\\\n\\\\t\\\\t{ label: 'byteSize', parser: Parsers.readByte() },\\\\n\\\\t\\\\t{ label: 'extras', bits: {\\\\n\\\\t\\\\t\\\\tfuture: { index: 0, length: 3 },\\\\n\\\\t\\\\t\\\\tdisposal: { index: 3, length: 3 },\\\\n\\\\t\\\\t\\\\tuserInput: { index: 6 },\\\\n\\\\t\\\\t\\\\ttransparentColorGiven: { index: 7 }\\\\n\\\\t\\\\t}},\\\\n\\\\t\\\\t{ label: 'delay', parser: Parsers.readUnsigned(true) },\\\\n\\\\t\\\\t{ label: 'transparentColorIndex', parser: Parsers.readByte() },\\\\n\\\\t\\\\t{ label: 'terminator', parser: Parsers.readByte(), skip: true }\\\\n\\\\t]\\\\n};\\\\n\\\\n// image pipeline block\\\\nvar image = {\\\\n\\\\tlabel: 'image',\\\\n\\\\trequires: function(stream){\\\\n\\\\t\\\\t// peek at the next byte\\\\n\\\\t\\\\tvar code = stream.peekByte();\\\\n\\\\t\\\\treturn code === 0x2C;\\\\n\\\\t},\\\\n\\\\tparts: [\\\\n\\\\t\\\\t{ label: 'code', parser: Parsers.readByte(), skip: true },\\\\n\\\\t\\\\t{\\\\n\\\\t\\\\t\\\\tlabel: 'descriptor', // image descriptor\\\\n\\\\t\\\\t\\\\tparts: [\\\\n\\\\t\\\\t\\\\t\\\\t{ label: 'left', parser: Parsers.readUnsigned(true) },\\\\n\\\\t\\\\t\\\\t\\\\t{ label: 'top', parser: Parsers.readUnsigned(true) },\\\\n\\\\t\\\\t\\\\t\\\\t{ label: 'width', parser: Parsers.readUnsigned(true) },\\\\n\\\\t\\\\t\\\\t\\\\t{ label: 'height', parser: Parsers.readUnsigned(true) },\\\\n\\\\t\\\\t\\\\t\\\\t{ label: 'lct', bits: {\\\\n\\\\t\\\\t\\\\t\\\\t\\\\texists: { index: 0 },\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tinterlaced: { index: 1 },\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tsort: { index: 2 },\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tfuture: { index: 3, length: 2 },\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tsize: { index: 5, length: 3 }\\\\n\\\\t\\\\t\\\\t\\\\t}}\\\\n\\\\t\\\\t\\\\t]\\\\n\\\\t\\\\t},{\\\\n\\\\t\\\\t\\\\tlabel: 'lct', // optional local color table\\\\n\\\\t\\\\t\\\\trequires: function(stream, obj, parent){\\\\n\\\\t\\\\t\\\\t\\\\treturn parent.descriptor.lct.exists;\\\\n\\\\t\\\\t\\\\t},\\\\n\\\\t\\\\t\\\\tparser: Parsers.readArray(3, function(stream, obj, parent){\\\\n\\\\t\\\\t\\\\t\\\\treturn Math.pow(2, parent.descriptor.lct.size + 1);\\\\n\\\\t\\\\t\\\\t})\\\\n\\\\t\\\\t},{\\\\n\\\\t\\\\t\\\\tlabel: 'data', // the image data blocks\\\\n\\\\t\\\\t\\\\tparts: [\\\\n\\\\t\\\\t\\\\t\\\\t{ label: 'minCodeSize', parser: Parsers.readByte() },\\\\n\\\\t\\\\t\\\\t\\\\tsubBlocks\\\\n\\\\t\\\\t\\\\t]\\\\n\\\\t\\\\t}\\\\n\\\\t]\\\\n};\\\\n\\\\n// plain text block\\\\nvar text = {\\\\n\\\\tlabel: 'text',\\\\n\\\\trequires: function(stream){\\\\n\\\\t\\\\t// just peek at the top two bytes, and if true do this\\\\n\\\\t\\\\tvar codes = stream.peekBytes(2);\\\\n\\\\t\\\\treturn codes[0] === 0x21 && codes[1] === 0x01;\\\\n\\\\t},\\\\n\\\\tparts: [\\\\n\\\\t\\\\t{ label: 'codes', parser: Parsers.readBytes(2), skip: true },\\\\n\\\\t\\\\t{ label: 'blockSize', parser: Parsers.readByte() },\\\\n\\\\t\\\\t{\\\\n\\\\t\\\\t\\\\tlabel: 'preData',\\\\n\\\\t\\\\t\\\\tparser: function(stream, obj, parent){\\\\n\\\\t\\\\t\\\\t\\\\treturn stream.readBytes(parent.text.blockSize);\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t},\\\\n\\\\t\\\\tsubBlocks\\\\n\\\\t]\\\\n};\\\\n\\\\n// application block\\\\nvar application = {\\\\n\\\\tlabel: 'application',\\\\n\\\\trequires: function(stream, obj, parent){\\\\n\\\\t\\\\t// make sure this frame doesn't already have a gce, text, comment, or image\\\\n\\\\t\\\\t// as that means this block should be attached to the next frame\\\\n\\\\t\\\\t//if(parent.gce || parent.text || parent.image || parent.comment){ return false; }\\\\n\\\\n\\\\t\\\\t// peek at the top two bytes\\\\n\\\\t\\\\tvar codes = stream.peekBytes(2);\\\\n\\\\t\\\\treturn codes[0] === 0x21 && codes[1] === 0xFF;\\\\n\\\\t},\\\\n\\\\tparts: [\\\\n\\\\t\\\\t{ label: 'codes', parser: Parsers.readBytes(2), skip: true },\\\\n\\\\t\\\\t{ label: 'blockSize', parser: Parsers.readByte() },\\\\n\\\\t\\\\t{\\\\n\\\\t\\\\t\\\\tlabel: 'id',\\\\n\\\\t\\\\t\\\\tparser: function(stream, obj, parent){\\\\n\\\\t\\\\t\\\\t\\\\treturn stream.readString(parent.blockSize);\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t},\\\\n\\\\t\\\\tsubBlocks\\\\n\\\\t]\\\\n};\\\\n\\\\n// comment block\\\\nvar comment = {\\\\n\\\\tlabel: 'comment',\\\\n\\\\trequires: function(stream, obj, parent){\\\\n\\\\t\\\\t// make sure this frame doesn't already have a gce, text, comment, or image\\\\n\\\\t\\\\t// as that means this block should be attached to the next frame\\\\n\\\\t\\\\t//if(parent.gce || parent.text || parent.image || parent.comment){ return false; }\\\\n\\\\n\\\\t\\\\t// peek at the top two bytes\\\\n\\\\t\\\\tvar codes = stream.peekBytes(2);\\\\n\\\\t\\\\treturn codes[0] === 0x21 && codes[1] === 0xFE;\\\\n\\\\t},\\\\n\\\\tparts: [\\\\n\\\\t\\\\t{ label: 'codes', parser: Parsers.readBytes(2), skip: true },\\\\n\\\\t\\\\tsubBlocks\\\\n\\\\t]\\\\n};\\\\n\\\\n// frames of ext and image data\\\\nvar frames = {\\\\n\\\\tlabel: 'frames',\\\\n\\\\tparts: [\\\\n\\\\t\\\\tgce,\\\\n\\\\t\\\\tapplication,\\\\n\\\\t\\\\tcomment,\\\\n\\\\t\\\\timage,\\\\n\\\\t\\\\ttext\\\\n\\\\t],\\\\n\\\\tloop: function(stream){\\\\n\\\\t\\\\tvar nextCode = stream.peekByte();\\\\n\\\\t\\\\t// rather than check for a terminator, we should check for the existence\\\\n\\\\t\\\\t// of an ext or image block to avoid infinite loops\\\\n\\\\t\\\\t//var terminator = 0x3B;\\\\n\\\\t\\\\t//return nextCode !== terminator;\\\\n\\\\t\\\\treturn nextCode === 0x21 || nextCode === 0x2C;\\\\n\\\\t}\\\\n};\\\\n\\\\n// main GIF schema\\\\nvar schemaGIF = [\\\\n\\\\t{\\\\n\\\\t\\\\tlabel: 'header', // gif header\\\\n\\\\t\\\\tparts: [\\\\n\\\\t\\\\t\\\\t{ label: 'signature', parser: Parsers.readString(3) },\\\\n\\\\t\\\\t\\\\t{ label: 'version', parser: Parsers.readString(3) }\\\\n\\\\t\\\\t]\\\\n\\\\t},{\\\\n\\\\t\\\\tlabel: 'lsd', // local screen descriptor\\\\n\\\\t\\\\tparts: [\\\\n\\\\t\\\\t\\\\t{ label: 'width', parser: Parsers.readUnsigned(true) },\\\\n\\\\t\\\\t\\\\t{ label: 'height', parser: Parsers.readUnsigned(true) },\\\\n\\\\t\\\\t\\\\t{ label: 'gct', bits: {\\\\n\\\\t\\\\t\\\\t\\\\texists: { index: 0 },\\\\n\\\\t\\\\t\\\\t\\\\tresolution: { index: 1, length: 3 },\\\\n\\\\t\\\\t\\\\t\\\\tsort: { index: 4 },\\\\n\\\\t\\\\t\\\\t\\\\tsize: { index: 5, length: 3 }\\\\n\\\\t\\\\t\\\\t}},\\\\n\\\\t\\\\t\\\\t{ label: 'backgroundColorIndex', parser: Parsers.readByte() },\\\\n\\\\t\\\\t\\\\t{ label: 'pixelAspectRatio', parser: Parsers.readByte() }\\\\n\\\\t\\\\t]\\\\n\\\\t},{\\\\n\\\\t\\\\tlabel: 'gct', // global color table\\\\n\\\\t\\\\trequires: function(stream, obj){\\\\n\\\\t\\\\t\\\\treturn obj.lsd.gct.exists;\\\\n\\\\t\\\\t},\\\\n\\\\t\\\\tparser: Parsers.readArray(3, function(stream, obj){\\\\n\\\\t\\\\t\\\\treturn Math.pow(2, obj.lsd.gct.size + 1);\\\\n\\\\t\\\\t})\\\\n\\\\t},\\\\n\\\\tframes // content frames\\\\n];\\\\n\\\\nmodule.exports = schemaGIF;\\\\n},{\\\\\\\"../bower_components/js-binary-schema-parser/src/parsers\\\\\\\":3}]},{},[4])\\\\n\\\\n\\\\n//# sourceURL=webpack://Raycaster/./src/external/gifuct-js.min.js?\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/texture.worker.js\\\":\\n/*!*******************************!*\\\\\\n  !*** ./src/texture.worker.js ***!\\n  \\\\*******************************/\\n/*! no exports provided */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony import */ var _external_gifuct_js_min_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./external/gifuct-js.min.js */ \\\\\\\"./src/external/gifuct-js.min.js\\\\\\\");\\\\n// Somehow works\\\\n\\\\n\\\\nconst GIF = _external_gifuct_js_min_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"window\\\\\\\"].GIF;\\\\n\\\\nasync function GIFFrame(frame) {\\\\n  let imageData = new ImageData(frame.patch, frame.dims.width, frame.dims.height);\\\\n  let imageBitmap = await createImageBitmap(imageData, 0, 0, frame.dims.width, frame.dims.height);\\\\n  return {\\\\n    bmp: imageBitmap,\\\\n    frameLength: frame.delay\\\\n  };\\\\n}\\\\n\\\\nself.addEventListener('message', function(e) {\\\\n  let msg = e.data;\\\\n  if (msg.type === 'loadGIF') {\\\\n    let url = msg.url;\\\\n    let options = msg.options;\\\\n    fetch(url, {\\\\n      method: 'GET'\\\\n    })\\\\n    .then((resp) => {\\\\n      if (!resp.ok) {\\\\n        throw new Error('Fetch failed at \\\\\\\"' + url + '\\\\\\\" ' + resp.statusText + \\\\\\\" (\\\\\\\" + resp.status + \\\\\\\")\\\\\\\");\\\\n      }\\\\n      else {\\\\n        return resp.arrayBuffer();\\\\n      }\\\\n    })\\\\n    .then((data) => new GIF(data))\\\\n    .then((gif) => {\\\\n      let frames = gif.decompressFrames(true);\\\\n      if ('alpha' in options && !options.alpha) {\\\\n        frames.forEach((f) => {\\\\n          if (f.disposalType === 1) {\\\\n            for (let i = 0; i < f.patch.length; i++) {\\\\n              if (f.patch[i] === 0) {\\\\n                f.patch[i] = 0;\\\\n              }\\\\n            }\\\\n          }\\\\n        });\\\\n      }\\\\n      frames.forEach((frame) => {\\\\n        // delete frame.pixels;\\\\n      });\\\\n      let promisedFrames = frames.map((f) => GIFFrame(f));\\\\n      Promise.all(promisedFrames).then((loadedFrames) => {\\\\n        // console.log('finished',data);\\\\n        self.postMessage({\\\\n          type: 'loadGIF',\\\\n          loadedFrames: loadedFrames\\\\n        });\\\\n      });\\\\n    });\\\\n  }\\\\n  if (msg.type === 'loadGIFFrames') {\\\\n\\\\n  }\\\\n});\\\\n\\\\n\\\\n//# sourceURL=webpack://Raycaster/./src/texture.worker.js?\\\");\\n\\n/***/ })\\n\\n/******/ });\", __webpack_require__.p + \"texture.worker.js\");\n};\n\n//# sourceURL=webpack://Raycaster/./src/texture.worker.js?");

/***/ }),

/***/ "./src/util.js":
/*!*********************!*\
  !*** ./src/util.js ***!
  \*********************/
/*! exports provided: requestPointerLock, scale, MapBuilder, Minimap, intersect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"requestPointerLock\", function() { return requestPointerLock; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MapBuilder\", function() { return MapBuilder; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Minimap\", function() { return Minimap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intersect\", function() { return intersect; });\n/* harmony import */ var _color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./color */ \"./src/color.js\");\n\n\nfunction requestPointerLock(game) {\n  game.input.mouse.requestPointerLock();\n}\n\nfunction scale(num, inMin, inMax, outMin, outMax) {\n  return (num - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n}\n\n/*\n  Data map is in the format:\n[\n  [\n    [2, 1, 0],\n    [1, 1, 0],\n    [1, 0, 2]\n  ],\n  {\n    0: {\n      object: Wall,\n      arguments: [{height:2}]\n    },\n    1: {\n      object: Wall,\n      arguments: [{texture:'foo'}]\n    },\n    2: {\n      object: CustomWall,\n      arguments: []\n    },\n  }\n]\nNOTE: Values in first array may also be arrays in the format of [value, arguments] to override the predefined arguments for said value.\nNOTE: This format also inherently supports other data types such as strings instead of numbers to serve as instances. This may be more clear if desired.\nNOTE: Arguments passed to each class reference will go:\n  \"(raycaster instance, x1, y1, x2, y2, ...args)\"\n  If the class instance's constructor doesn't comply with this format, you may instead pass in a helper function to construct the instance:\n  // NOTE: This format also be helpful in the instantiation of new arguments every time (instead of reusing the same preinstantiated object)\n    [\n      0: {\n        helper: function(raycaster, x1, y1, x2, y2) {\n          return new CustomWall(raycaster, x1, y1, x2, y2, {texture:'bar'})\n        }\n      }\n    ]\n*/\nconst MapBuilder = {\n  build(raycaster, dataMap, xDimensions, yDimensions) {\n    const map = [];\n    const height = raycaster.worldHeight / Math.max(yDimensions, dataMap[0].length);\n    for (let yInd = 0; yInd < dataMap[0].length; yInd++) {\n      const width = raycaster.worldWidth / Math.max(xDimensions, dataMap[0][yInd].length);\n      for (let xInd = 0; xInd < dataMap[0][yInd].length; xInd++) {\n        let type = dataMap[0][yInd][xInd];\n        let object;\n        const x1 = width * xInd;\n        const x2 = x1 + width;\n        const y1 = height * yInd;\n        const y2 = y1 + height;\n\n\n        let args;\n\n        if (typeof type === \"undefined\" || type === null || type === undefined) {\n          continue;\n        }\n\n        if (Array.isArray(type)) {\n          [type, ...args] = type;\n        }\n\n        const data = dataMap[1][type];\n\n        if (typeof data === \"undefined\" || data === null || data === undefined) {\n          continue;\n        }\n\n        if (typeof args === 'undefined') args = Object.prototype.hasOwnProperty.call(data, 'arguments') ? data.arguments : [];\n\n        if (Object.prototype.hasOwnProperty.call(data, 'helper')) {\n          object = data.helper(raycaster, x1, y1, x2, y2);\n        } else {\n          // eslint-disable-next-line new-cap\n          object = new data.object(raycaster, x1, y1, x2, y2, ...args);\n        }\n        map.push(object);\n        // super(raycaster,x,y,x2,y2,height,options);\n      }\n    }\n    return map;\n  },\n  loadFromFile(file) {\n    // TODO\n\n  },\n};\n\n/**\n * Minimap utility class\n *\n * @param {PlanarObject} object - The object that the minimap is rendered relative to. May be reassigned at any point.\n * @param {number} x - X-axis coordinate in which the minimap will be rendered onto the screen;\n * @param {number} y - Y-axis coordinate in which the minimap will be rendered onto the screen;\n * @param {number} width - The width of the minimap in pixels.\n * @param {number} height - The height of the minimap in pixels.\n * @param {number|null} [viewWidth=null] - The amount of in-game width rendered on the minimap. Default shows the entire map.\n * @param {number|null} [viewHeight=null] - The amount of in-game height rendered on the minimap. Default shows the entire map.\n * @param {object} [options={}] - Additional options.\n * @param {Color} [options.backgroundColor=new Color(80,80,80,1)] - Background color of the Minimap.\n * @param {Color} [options.borderColor=new Color(50,50,50,1)] - Border color of the Minimap.\n * @param {number} [options.borderWidth=0] - Width of the Minimap's border.\n *\n */\nclass Minimap {\n  constructor(object, x, y, width, height, viewWidth=null, viewHeight=null, options={}) {\n    this.object = object;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.viewWidth = viewWidth;\n    this.viewHeight = viewHeight;\n\n    this.options = {\n      backgroundColor:new _color__WEBPACK_IMPORTED_MODULE_0__[\"default\"](80,80,80,1),\n      borderColor:new _color__WEBPACK_IMPORTED_MODULE_0__[\"default\"](50,50,50,1),\n      borderWidth:0\n    };\n    Object.keys(options).forEach((key) => {\n      if (Object.prototype.hasOwnProperty.call(this.options, key)) {\n        this.options[key] = options[key];\n      }\n    });\n    Object.keys(this.options).forEach((key) => {\n      this[key] = this.options[key];\n    });\n    delete this.options;\n  }\n  /**\n   * Method for rendering the minimap onto the screen\n   */\n  render() {\n    let ctx = this.object.game.canvas.getContext('2d');\n    let gameWidth = this.object.raycaster.worldWidth;\n    let gameHeight = this.object.raycaster.worldHeight;\n    if (this.borderWidth !== 0) {\n      ctx.fillStyle = this.borderColor.toCSSString();\n      ctx.fillRect(this.x-this.borderWidth,this.y-this.borderWidth,this.width+(this.borderWidth*2),this.height+(this.borderWidth*2));\n    }\n    ctx.fillStyle = this.backgroundColor.toCSSString();\n    ctx.fillRect(this.x, this.y, this.width, this.height);\n    this.object.raycaster.objects.forEach((obj,i) => {\n      let color = obj.color.toCSSString();\n      let startX = this.x + this.width * (obj.start.x / gameWidth);\n      let startY = this.y + this.height * (obj.start.y / gameHeight);\n      let endX = this.x + this.width * (obj.end.x / gameWidth);\n      let endY = this.y + this.height * (obj.end.y / gameHeight);\n      ctx.strokeStyle = color;\n      ctx.moveTo(startX,startY);\n      ctx.lineTo(endX,endY);\n    });\n    ctx.stroke();\n  }\n}\n\nfunction intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n  // Check if none of the lines are of length 0\n  if ((x1 === x2 && y1 === y2) || (x3 === x4 && y3 === y4)) {\n    return false;\n  }\n\n  const denominator = ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n\n  // Lines are parallel\n  if (denominator === 0) {\n    return false;\n  }\n\n  const ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;\n  const ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;\n\n  // is the intersection along the segments\n  if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n    return false;\n  }\n\n  // Return a object with the x and y coordinates of the intersection\n  const x = x1 + ua * (x2 - x1);\n  const y = y1 + ua * (y2 - y1);\n\n  return { x, y };\n}\n\n\n//# sourceURL=webpack://Raycaster/./src/util.js?");

/***/ })

/******/ });